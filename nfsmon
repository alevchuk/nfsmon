#!/usr/bin/env ruby


require 'curses'

UPDATE_FREQ = 80 # 120 would be every minuted

trap("INT"){ exit } 

if ! [1,2].include?(ARGV.size)
  STDERR.puts "ERROR: Invalid number of arguments #{ARGV.size}"
  STDERR.puts "Usage: #{File.basename(__FILE__)} <probe-log-file>" +
    " [<jump-to-time>]"
  STDERR.puts ""
  STDERR.puts "  <probe-log-file>  Log file where pstmd is probing"
  STDERR.puts "  [<jump-to-date>]  Date in YYYY-MM-DD format (Optional)"
  exit 1
end
PROBE_FILE = ARGV[0]
if !File.file?(PROBE_FILE) and !File.symlink?(PROBE_FILE)
  STDERR.puts "ERROR: File does not exist #{PROBE_FILE}"
  exit 1
end


# This is the only part that is not generic
# it's specific to UCR Bioinfo storage site and
# how the server-side CRON were installed
mount_info = `df -P #{PROBE_FILE}`.split("\n").last

LOGFILE_PREFIX = if mount_info =~ /^zeus/
  "/srv/projects/zeus_log/nfs-fileio"
elsif mount_info =~ /^tern/
  "/srv/zpools/tern.ib_bigdata/tern_log/nfs-fileio"
else
  STDERR.puts "WARNING: I don't know which NFS server you need"
  STDERR.puts "WARNING: Defaulting to Tern"

  STDERR.puts "Press Enter to continue"
  gets
  "/srv/zpools/tern.ib_bigdata/tern_log/nfs-fileio"
end



def get_terminal_dimentions
  @COLS = `tput cols`.to_i
  @ROWS = (`tput lines`.to_i - 1)
end

get_terminal_dimentions

PAGE = if ARGV[1].nil?
  1
else
  if ARGV[1] =~ /^([0-9]{4})-([0-9]{2})-([0-9]{2})/
    minutes_since = (Time.now - Time.mktime($1.to_i, $2.to_i, $3.to_i)) / 60
    minutes_since.to_i / (@ROWS - 2)
  else
    STDERR.puts "ERROR: Invalid <jump-to-date> format #{ARGV[1]}"
    exit 1
  end
end

def restart_curses
  Curses.noecho # do not show typed keys
  Curses.init_screen
  Curses.stdscr.keypad(true) # enable arrow keys (for pageup/down)
  Curses.stdscr.nodelay = 1
  Curses.clear
  Curses.setpos(0,0)
  Curses.refresh
end
restart_curses

#Thread.new {loop {get_terminal_dimentions; sleep 0.3}}

class Integer
  def rj; self.to_s.rjust(2, '0') end
end

def custom_to_log_format(x) # To sring
  "#{x[:y]}-#{x[:month].rj}-#{x[:d].rj}_#{x[:h].rj}-#{x[:m].rj}"
end

def custom_to_s(x) # To sring
  "#{x[:y]}-#{x[:month].rj}-#{x[:d].rj} #{x[:h].rj}:#{x[:m].rj}"
end

def debug(j) # j is a custom structure - a hash of hashes
  STDERR.puts j.collect {|x, count| "#{custom_to_s(x)} #{count}"}.sort.reverse
  STDERR.puts
end



def get_actual
  actual = Hash.new(0)
  `cat #{PROBE_FILE} | cut -f1 | uniq -c`.each_line do |line|
    count, timestamp = line.split(' ')
    date, time = timestamp.split('_')
  
    y,month,d = date.split('-')
    h,m = time.split('-')

    y=y.to_i; month=month.to_i; d=d.to_i; h=h.to_i; m=m.to_i; count=count.to_i

    actual[{:y=>y, :month=>month, :d=>d, :h=>h, :m=>m}] = count
  end
  
  actual
end

def get_expected(page)
  t_now = Time.now
  start_time = t_now - @ROWS * 60 * page       + (page - 1) * 2 * 60 # bottom
  end_time   = t_now - @ROWS * 60 * (page - 1) + (page - 1) * 2 * 60 # top

  lines = (start_time..end_time).step(60).to_a
  lines = lines[1..-1] # cut the oldest one - leave space for status bar
  lines.reverse.collect do |t|
    {:y=>t.year, :month=>t.month, :d=>t.day, :h=>t.hour, :m=>t.min}
  end
end


#debug get_actual
#debug get_expected(1)



Curses.clear
Curses.setpos(0,0)

page = PAGE
selected_line = @ROWS / 2
loop_count = 0
@actual = nil
@expected = nil
@current_lines = nil

def read_log(page)
  @actual = get_actual
  @expected = get_expected(page)
end


get_terminal_dimentions

no_key_pressed_count = 0
@sleepy_mode = true
loop do
  c = Curses.getch

  exit if c == 113 # q

  @no_key_pressed = false
  if c == Curses::Key::PPAGE and page != 1
    page -= 1
    @expected = get_expected(page)
    if page == 1
      read_log(1)
    end

  elsif c == Curses::Key::NPAGE
    page += 1
    @expected = get_expected(page)

  elsif c == Curses::Key::HOME
    page = 1
    selected_line = 0
    @expected = get_expected(page)

  elsif c == Curses::Key::UP or c == 107 # up k
    if selected_line != 0
      selected_line -= 1 
    elsif page != 1
      selected_line = @ROWS - 1
      page -= 1
      @expected = get_expected(page)
      if page == 1
        read_log(1)
      end
    end

  elsif c == Curses::Key::DOWN or c == 106 # down j
    if selected_line != @ROWS - 1
      selected_line += 1
    else
      selected_line = 0
      page += 1
      @expected = get_expected(page)
    end

  elsif c == 10 or c == 32 # Enter or space
    t_list = @expected.sort{|i1,i2| custom_to_s(i1) <=> custom_to_s(i2)}
    t = t_list[@ROWS - 1 - selected_line]
    
    file = "#{LOGFILE_PREFIX}-#{custom_to_log_format(t)}"
    Curses.close_screen
    system "less -NS #{file}"
    restart_curses
    Curses.clear
    Curses.refresh

  else
    @no_key_pressed = true
  end




  # Computationally intensive operation
  if loop_count % UPDATE_FREQ == 0 and page == 1
    read_log(page)
    #Curses.refresh
  end


  Curses.setpos(0,0)
  @expected.each_with_index do |x, index|
    num_stars = @actual[x]
    unfinished = ((page == 1 and index == 0) ? '...' : '')
    numeric_label = (unfinished == "...") ? '' : @actual[x].to_s.rjust(2,'0')
    line = "#{x[:h].rj}:#{x[:m].rj} " + "*" * (num_stars/2) + unfinished +
      " #{numeric_label}"

    line_final = line.ljust(30 + 9) 
    if index == selected_line
      Curses.standout
      Curses.addstr "|" + line_final + "|\n"
      Curses.standend
    else
      Curses.addstr " " + line_final + "\n"
    end
  end
  l = @expected.last

  cut_size = @COLS - 30
  corner_size = @COLS - 19
  probe_file = PROBE_FILE.sub(ENV['HOME'], '~')
  cut_test = probe_file.size > cut_size
  start_of_cut = cut_test ? probe_file.size - cut_size : 0
  bottom_right_corner = probe_file[start_of_cut..-1]
  bottom_right_corner = "...#{bottom_right_corner}" if cut_test
  Curses.addstr \
    " #{custom_to_s(l)} #{bottom_right_corner.rjust(corner_size)}\n"

  get_terminal_dimentions

  if @no_key_pressed
    if @sleepy_mode
      sleep 0.5 
      loop_count += 1
    else
      sleep 0.1
      no_key_pressed_count += 1
      if no_key_pressed_count == 50
        @sleepy_mode = true
      end
    end

  else # Key was pressed just now
    @sleepy_mode = false
    no_key_pressed_count = 0
    sleep 0.01
  end
end
