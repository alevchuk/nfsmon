#!/usr/bin/env ruby

if ARGV.size != 1
  STDERR.puts "ERROR: Invalid number of arguments #{ARGV.size}"
  STDERR.puts "Usage: #{File.basename(__FILE__)} <probe-directory>"
  STDERR.puts ""
  STDERR.puts "  <probe-directory>  is where pstmd is running"
  exit 1
end
PROBE_DIR = ARGV[0]

COLS = `tput cols`.to_i
ROWS = (`tput lines`.to_i - 1)

class Integer
  def rj; self.to_s.rjust(2, '0') end
end

def debug(mystructure)
  STDERR.puts(
    mystructure.collect do |x, count|
      "#{x[:y]}-#{x[:month].rj}-#{x[:d].rj} #{x[:h].rj}:#{x[:m].rj} #{count}"
    end.sort.reverse
  )
end



def get_actual
  actual = Hash.new(0)
  `cat #{PROBE_DIR}/log | cut -f1 | uniq -c`.each_line do |line|
    count, timestamp = line.split(' ')
    date, time = timestamp.split('_')
  
    y,month,d = date.split('-')
    h,m = time.split('-')

    y=y.to_i; month=month.to_i; d=d.to_i; h=h.to_i; m=m.to_i; count=count.to_i

    actual[{:y=>y, :month=>month, :d=>d, :h=>h, :m=>m}] = count
  end
  
  actual
end

def get_expected(page)
  t_now = Time.now
  range = (t_now - (ROWS - 1) * 60)..(t_now)
  range.step(60).to_a.reverse.collect do |t|
    {:y=>t.year, :month=>t.month, :d=>t.day, :h=>t.hour, :m=>t.min}
  end
end


debug get_actual
puts
debug get_expected(1)

#loop do
#  actual = get_actual
#  expected = get_expected
#
#  unfinished = (i == 0 ? '...' : '')
#  puts "#{t_str} " + "*" * ACTUAL[t_str] + unfinished +
#    " #{ACTUAL[t_str].to_s.rjust(2,'0')}"
#
#  sleep 10
#end
